package com.pequenospassos.domain.model

/**
 * Enum de categorias de tarefas.
 *
 * Representa as 27 categorias dispon√≠veis para classificar tarefas,
 * organizadas em 6 grupos principais.
 *
 * Cada categoria tem:
 * - Nome leg√≠vel (displayName)
 * - Emoji representativo
 * - Grupo ao qual pertence
 *
 * @property displayName Nome exibido na interface
 * @property emoji Emoji representativo da categoria
 * @property group Grupo ao qual a categoria pertence
 *
 * @since MVP-07 (16/10/2025)
 * @author PequenosPassos Development Team
 */
enum class TaskCategory(
    val displayName: String,
    val emoji: String,
    val group: CategoryGroup
) {
    // ===== GRUPO 1: AUTOCUIDADO E ROTINA PESSOAL (6) =====
    HIGIENE_PESSOAL("Higiene Pessoal", "üßº", CategoryGroup.AUTOCUIDADO),
    BANHO("Banho", "üöø", CategoryGroup.AUTOCUIDADO),
    VESTIR("Vestir-se", "üëï", CategoryGroup.AUTOCUIDADO),
    SONO("Sono e Descanso", "üò¥", CategoryGroup.AUTOCUIDADO),
    ALIMENTACAO("Alimenta√ß√£o", "üçΩÔ∏è", CategoryGroup.AUTOCUIDADO),
    USO_BANHEIRO("Uso do Banheiro", "üöΩ", CategoryGroup.AUTOCUIDADO),

    // ===== GRUPO 2: SA√öDE, REGULA√á√ÉO E TERAPIAS (9) =====
    TERAPIA_FONO("Terapia Fonoaudiol√≥gica", "üó£Ô∏è", CategoryGroup.SAUDE_TERAPIAS),
    TERAPIA_TO("Terapia Ocupacional", "ü§≤", CategoryGroup.SAUDE_TERAPIAS),
    TERAPIA_PSICO("Terapia Psicol√≥gica", "üß†", CategoryGroup.SAUDE_TERAPIAS),
    MEDICACAO("Medica√ß√£o", "üíä", CategoryGroup.SAUDE_TERAPIAS),
    EXERCICIO_FISICO("Exerc√≠cio F√≠sico", "üèÉ", CategoryGroup.SAUDE_TERAPIAS),
    RELAXAMENTO("Relaxamento", "üßò", CategoryGroup.SAUDE_TERAPIAS),
    RESPIRACAO("Exerc√≠cios de Respira√ß√£o", "üå¨Ô∏è", CategoryGroup.SAUDE_TERAPIAS),
    SENSORIAL("Atividade Sensorial", "üëê", CategoryGroup.SAUDE_TERAPIAS),
    CONSULTA_MEDICA("Consulta M√©dica", "‚öïÔ∏è", CategoryGroup.SAUDE_TERAPIAS),

    // ===== GRUPO 3: DESENVOLVIMENTO COGNITIVO E EDUCACIONAL (4) =====
    LEITURA("Leitura", "üìö", CategoryGroup.COGNITIVO_EDUCACIONAL),
    ESCRITA("Escrita", "‚úçÔ∏è", CategoryGroup.COGNITIVO_EDUCACIONAL),
    MATEMATICA("Matem√°tica", "üî¢", CategoryGroup.COGNITIVO_EDUCACIONAL),
    ESTUDO("Estudos", "üìñ", CategoryGroup.COGNITIVO_EDUCACIONAL),

    // ===== GRUPO 4: INTERA√á√ÉO E SOCIALIZA√á√ÉO (3) =====
    INTERACAO_SOCIAL("Intera√ß√£o Social", "üë•", CategoryGroup.INTERACAO_SOCIAL),
    COMUNICACAO("Comunica√ß√£o", "üí¨", CategoryGroup.INTERACAO_SOCIAL),
    BRINCADEIRA("Brincadeira", "üéÆ", CategoryGroup.INTERACAO_SOCIAL),

    // ===== GRUPO 5: ATIVIDADES COTIDIANAS E FUNCIONAIS (3) =====
    TAREFAS_CASA("Tarefas Dom√©sticas", "üßπ", CategoryGroup.ATIVIDADES_COTIDIANAS),
    ORGANIZACAO("Organiza√ß√£o", "üì¶", CategoryGroup.ATIVIDADES_COTIDIANAS),
    TRANSICAO("Transi√ß√£o de Atividade", "üîÑ", CategoryGroup.ATIVIDADES_COTIDIANAS),

    // ===== GRUPO 6: OUTROS (2) =====
    LAZER("Lazer", "üé®", CategoryGroup.OUTROS),
    OUTROS("Outros", "üìù", CategoryGroup.OUTROS);

    /**
     * Retorna a representa√ß√£o completa da categoria (emoji + nome).
     * Exemplo: "üßº Higiene Pessoal"
     */
    fun getFullDisplay(): String = "$emoji $displayName"

    companion object {
        /**
         * Retorna todas as categorias agrupadas por CategoryGroup.
         *
         * @return Map<CategoryGroup, List<TaskCategory>>
         */
        fun getCategoriesByGroup(): Map<CategoryGroup, List<TaskCategory>> {
            return entries.groupBy { it.group }
        }

        /**
         * Busca uma categoria pelo nome do enum (case-insensitive).
         *
         * @param name Nome do enum (ex: "HIGIENE_PESSOAL")
         * @return TaskCategory ou null se n√£o encontrado
         */
        fun fromString(name: String): TaskCategory? {
            return entries.find { it.name.equals(name, ignoreCase = true) }
        }

        /**
         * Retorna a categoria padr√£o (OUTROS).
         */
        fun default(): TaskCategory = OUTROS
    }
}

/**
 * Enum de grupos de categorias.
 *
 * Organiza as 27 categorias em 6 grupos principais para facilitar
 * a navega√ß√£o e sele√ß√£o na interface.
 *
 * @property displayName Nome exibido do grupo
 * @property emoji Emoji representativo do grupo
 *
 * @since MVP-07 (16/10/2025)
 */
enum class CategoryGroup(
    val displayName: String,
    val emoji: String
) {
    AUTOCUIDADO("Autocuidado e Rotina Pessoal", "üßç"),
    SAUDE_TERAPIAS("Sa√∫de, Regula√ß√£o e Terapias", "‚öïÔ∏è"),
    COGNITIVO_EDUCACIONAL("Desenvolvimento Cognitivo e Educacional", "üß†"),
    INTERACAO_SOCIAL("Intera√ß√£o e Socializa√ß√£o", "üë•"),
    ATIVIDADES_COTIDIANAS("Atividades Cotidianas e Funcionais", "üè†"),
    OUTROS("Outros", "üìã");

    /**
     * Retorna a representa√ß√£o completa do grupo (emoji + nome).
     */
    fun getFullDisplay(): String = "$emoji $displayName"
}
